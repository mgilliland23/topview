{"version":3,"sources":["logo.svg","components/Navbar/topview_color.svg","components/CardWrapper/index.js","components/CardColumn/index.js","components/Card/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardWrapper","props","className","children","Card","key","id","alt","name","src","image","onClick","handleClick","Navbar","href","require","width","height","App","state","rentals","alert","this","products","map","rentalData","CardColumn","price","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"whCAAAA,EAAOC,QAAU,IAA0B,kC,sECA3CD,EAAOC,QAAU,IAA0B,2C,qICW5BC,MARf,SAAqBC,GACnB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OAAOD,EAAME,YCAnBH,MAJf,SAAqBC,GACnB,OAAO,yBAAKC,UAAU,8BAA8BD,EAAME,W,MCqB7CC,MArBf,SAAcH,GACZ,OACE,yBAAKC,UAAU,eAAeG,IAAKJ,EAAMK,IACvC,yBAAKC,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,MAAOR,UAAU,iBAClD,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcD,EAAMO,MAKlC,4BACEN,UAAU,iBACVS,QAAS,kBAAMV,EAAMW,YAAYX,EAAMO,QAFzC,eCOOK,MAjBf,WACE,OACE,yBAAKX,UAAU,2CACb,uBAAGA,UAAU,eAAeY,KAAK,KAC/B,yBACEL,IAAKM,EAAQ,IACbC,MAAM,MACNC,OAAO,KACPV,IAAI,OACJL,UAAU,UAGd,0BAAMA,UAAU,eAAhB,iB,OC4BSgB,E,2MA/BbC,MAAQ,CACNC,W,EAGFR,YAAc,SAAAJ,GACZa,MAAM,oBAAsBb,I,wEAGpB,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGc,KAAKH,MAAMC,QAAQG,SAASC,KAAI,SAAAC,GAAU,OACzC,kBAACC,EAAD,KACE,kBAAC,EAAD,CACEhB,MAAOe,EAAWf,MAClBF,KAAMiB,EAAWjB,KACjBF,GAAImB,EAAWnB,GACfqB,MAAOF,EAAWE,MAClBf,YAAa,EAAKA,kBAR1B,U,GAbUgB,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e58425b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/topview_color.282a8749.svg\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction CardWrapper(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default CardWrapper;\n","import React from \"react\";\n\nfunction CardWrapper(props) {\n  return <div className=\"col-xl-3 col-lg-4 col-md-6\">{props.children}</div>;\n}\n\nexport default CardWrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card mx-auto\" key={props.id}>\n      <img alt={props.name} src={props.image} className=\"card-img-top\" />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{props.name}</h5>\n        {/* <p className=\"card-text\">\n          Some quick example text to build on the card title and make up the\n          bulk of the card's content.\n        </p> */}\n        <button\n          className=\"btn btn-custom\"\n          onClick={() => props.handleClick(props.name)}\n        >\n          RENT NOW\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n//import \"./style.css\";\n\nfunction Navbar() {\n  return (\n    <nav className=\"navbar sticky-top navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        <img\n          src={require(\"./topview_color.svg\")}\n          width=\"100\"\n          height=\"40\"\n          alt=\"logo\"\n          className=\"ml-5\"\n        />\n      </a>\n      <span className=\"navbar-text\">Rent a bike</span>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CardWrapper from \"./components/CardWrapper\";\nimport CardColumn from \"./components/CardColumn\";\n\nimport Card from \"./components/Card\";\nimport Navbar from \"./components/Navbar\";\n\nimport rentals from \"./bikerentals.json\";\n\nclass App extends React.Component {\n  state = {\n    rentals\n  };\n\n  handleClick = name => {\n    alert(\"You have rented: \" + name);\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <CardWrapper>\n          {this.state.rentals.products.map(rentalData => (\n            <CardColumn>\n              <Card\n                image={rentalData.image}\n                name={rentalData.name}\n                id={rentalData.id}\n                price={rentalData.price}\n                handleClick={this.handleClick}\n              />\n            </CardColumn>\n          ))}\n          ;\n        </CardWrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}